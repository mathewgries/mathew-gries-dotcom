"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const packager_1 = require("../packager");
function run(opts) {
    var _a;
    const manager = packager_1.Packager.getManager(opts.rootDir);
    const json = JSON.parse(fs_extra_1.default.readFileSync(path_1.default.join(opts.rootDir, "package.json")).toString());
    const version = opts.version || "latest";
    for (const pkg of [
        "@serverless-stack/cli",
        "@serverless-stack/resources",
    ]) {
        if (!opts.verbose)
            console.log(chalk_1.default.gray("Updating", pkg, "to", version));
        manager.add({
            cwd: opts.rootDir,
            type: ((_a = json.dependencies) === null || _a === void 0 ? void 0 : _a[pkg]) ? "dependencies" : "devDependencies",
            pkgs: [`${pkg}@${version}`],
            verbose: opts.verbose,
        });
    }
    const module = "@serverless-stack/core/package.json";
    const compare = fs_extra_1.default.readJsonSync(require.resolve(module));
    const cdkVersion = compare.dependencies["aws-cdk"];
    for (const type of ["dependencies", "devDependencies"]) {
        const updates = Object.keys(json[type] || {})
            .filter((key) => /^@?aws-cdk/.test(key))
            .map((key) => `${key}@${cdkVersion}`);
        if (!updates.length)
            continue;
        if (!opts.verbose)
            updates.forEach((pkg) => console.log(chalk_1.default.gray("Updating", pkg)));
        manager.add({
            type,
            cwd: opts.rootDir,
            pkgs: updates,
            verbose: opts.verbose,
        });
    }
    console.log(`SST: ${compare.version}\nCDK: ${cdkVersion}`);
}
exports.run = run;
