"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const dotenv_1 = __importDefault(require("dotenv"));
const dotenv_expand_1 = __importDefault(require("dotenv-expand"));
const _1 = require("./");
async function load(opts) {
    const paths = [...((opts === null || opts === void 0 ? void 0 : opts.searchPaths) || []), ".env.local", ".env"];
    paths
        .map((file) => path_1.default.join(_1.Paths.APP_PATH, file))
        .filter((path) => fs_1.default.existsSync(path))
        .map((path) => {
        const result = dotenv_1.default.config({
            path,
            debug: process.env.DEBUG !== undefined ? true : undefined,
        });
        if (result.error) {
            // This should throw a normal exception and not assume the process should be killed
            console.error(`Failed to load environment variables from "${path}".`);
            console.error(result.error.message);
            process.exit(1);
        }
        return (0, dotenv_expand_1.default)(result);
    });
}
exports.load = load;
