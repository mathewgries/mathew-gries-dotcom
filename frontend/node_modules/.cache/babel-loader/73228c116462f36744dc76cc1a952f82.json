{"ast":null,"code":"export default function runOperations(operator, a, b) {\n  let result;\n\n  switch (operator) {\n    case \"add\":\n      result = add(a, b);\n      break;\n\n    case \"subtract\":\n      result = subtract(a, b);\n      break;\n\n    case \"multiply\":\n      result = multiply(a, b);\n      break;\n\n    case \"divide\":\n      result = divide(a, b);\n      break;\n\n    default:\n      alert(\"Something went wrong!\");\n      break;\n  }\n\n  return removeTrailingZero(result);\n} //========================================================================//\n\nfunction add(a, b) {\n  let num1;\n  let num2;\n  const p = a.indexOf(\".\") > -1 || b.indexOf(\".\") > -1 ? getUlps(a, b) : null;\n\n  if (p) {\n    // if decimals, do some magic below\n    num1 = convertToInt(a, p);\n    num2 = convertToInt(b, p);\n  } else {\n    // If no decimals, parse and go\n    num1 = parseFloat(a);\n    num2 = parseFloat(b);\n  }\n\n  const result = num1 + num2;\n  return (result / Math.pow(10, p)).toFixed(p);\n} //========================================================================//\n\n\nfunction subtract(a, b) {\n  let num1;\n  let num2;\n  const p = a.indexOf(\".\") > -1 || b.indexOf(\".\") > -1 ? getUlps(a, b) : null;\n\n  if (p) {\n    // if decimals, do some magic below\n    num1 = convertToInt(a, p);\n    num2 = convertToInt(b, p);\n  } else {\n    // If no decimals, parse and go\n    num1 = parseFloat(a);\n    num2 = parseFloat(b);\n  }\n\n  const result = num1 - num2;\n  return (result / Math.pow(10, p)).toFixed(p);\n} //========================================================================//\n\n\nfunction multiply(a, b) {\n  return (a * b).toFixed(getUlps(a, b));\n} //========================================================================//\n\n\nfunction divide(a, b) {\n  return (a / b).toFixed(getUlps(a, b));\n} //========================================================================//\n\n\nfunction getUlps(a, b) {\n  // Get the units in the last place. Returns the length for the longer of the two\n  // Only used for adding and subtracting\n  const num1 = a.indexOf(\".\") > -1 ? a.length - a.indexOf(\".\") - 1 : 0;\n  const num2 = b.indexOf(\".\") > -1 ? b.length - b.indexOf(\".\") - 1 : 0;\n  return num1 >= num2 ? num1 : num2;\n} //========================================================================//\n\n\nfunction convertToInt(str, p) {\n  let num = parseFloat(str); // If decimals, get places.\n\n  const places = str.indexOf(\".\") > -1 ? str.length - str.indexOf(\".\") - 1 : 0;\n\n  if (places < p) {\n    const padding = p - places;\n    const multiplyier = Math.pow(10, places + padding);\n    return num * multiplyier;\n  } else {\n    return num * Math.pow(10, p);\n  }\n} //========================================================================//\n\n\nfunction removeTrailingZero(str) {\n  if (str.indexOf(\".\") > -1) {\n    let countZeros = 0; // Count ending zeros after decimal and remove\n\n    for (let i = str.length - 1; i >= 0; i--) {\n      if (str.charAt(i) === \"0\") {\n        countZeros++;\n      } else {\n        break;\n      }\n    }\n\n    if (countZeros > 0) {\n      // Remove trailing zeros from final result\n      const removeZeros = str.substring(0, str.length - countZeros); // If decimal is all that is left, remove that also\n\n      if (removeZeros.indexOf(\".\") === removeZeros.length - 1) {\n        return removeZeros.substring(0, removeZeros.indexOf(\".\"));\n      }\n\n      return removeZeros;\n    } else {\n      // No trailing zeros found\n      return str;\n    }\n  } else {\n    // No decimal in number\n    return str;\n  }\n}","map":{"version":3,"sources":["/Users/mat/projects/mathew-gries-dotcom/frontend/src/helpers/runOperations.js"],"names":["runOperations","operator","a","b","result","add","subtract","multiply","divide","alert","removeTrailingZero","num1","num2","p","indexOf","getUlps","convertToInt","parseFloat","Math","pow","toFixed","length","str","num","places","padding","multiplyier","countZeros","i","charAt","removeZeros","substring"],"mappings":"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","sourcesContent":["export default function runOperations(operator, a, b) {\n  let result;\n\n  switch (operator) {\n    case \"add\":\n      result = add(a, b);\n      break;\n    case \"subtract\":\n      result = subtract(a, b);\n      break;\n    case \"multiply\":\n      result = multiply(a, b);\n      break;\n    case \"divide\":\n      result = divide(a, b);\n      break;\n    default:\n      alert(\"Something went wrong!\");\n      break;\n  }\n\n  return removeTrailingZero(result);\n}\n\n//========================================================================//\n\nfunction add(a, b) {\n  let num1;\n  let num2;\n  const p = a.indexOf(\".\") > -1 || b.indexOf(\".\") > -1 ? getUlps(a, b) : null;\n\n  if (p) {\n    // if decimals, do some magic below\n    num1 = convertToInt(a, p);\n    num2 = convertToInt(b, p);\n  } else {\n    // If no decimals, parse and go\n    num1 = parseFloat(a);\n    num2 = parseFloat(b);\n  }\n\n  const result = num1 + num2;\n\n  return (result / Math.pow(10, p)).toFixed(p);\n}\n\n//========================================================================//\n\nfunction subtract(a, b) {\n  let num1;\n  let num2;\n  const p = a.indexOf(\".\") > -1 || b.indexOf(\".\") > -1 ? getUlps(a, b) : null;\n\n  if (p) {\n    // if decimals, do some magic below\n    num1 = convertToInt(a, p);\n    num2 = convertToInt(b, p);\n  } else {\n    // If no decimals, parse and go\n    num1 = parseFloat(a);\n    num2 = parseFloat(b);\n  }\n\n  const result = num1 - num2;\n\n  return (result / Math.pow(10, p)).toFixed(p);\n}\n\n//========================================================================//\n\nfunction multiply(a, b) {\n  return (a * b).toFixed(getUlps(a, b));\n}\n\n//========================================================================//\n\nfunction divide(a, b) {\n  return (a / b).toFixed(getUlps(a, b));\n}\n\n//========================================================================//\n\nfunction getUlps(a, b) {\n  // Get the units in the last place. Returns the length for the longer of the two\n  // Only used for adding and subtracting\n  const num1 = a.indexOf(\".\") > -1 ? a.length - a.indexOf(\".\") - 1 : 0;\n  const num2 = b.indexOf(\".\") > -1 ? b.length - b.indexOf(\".\") - 1 : 0;\n  return num1 >= num2 ? num1 : num2;\n}\n\n//========================================================================//\n\nfunction convertToInt(str, p) {\n  let num = parseFloat(str);\n  // If decimals, get places.\n  const places = str.indexOf(\".\") > -1 ? str.length - str.indexOf(\".\") - 1 : 0;\n\n  if (places < p) {\n    const padding = p - places;\n    const multiplyier = Math.pow(10, places + padding);\n\n    return num * multiplyier;\n  } else {\n    return num * Math.pow(10, p);\n  }\n}\n\n//========================================================================//\n\nfunction removeTrailingZero(str) {\n  if (str.indexOf(\".\") > -1) {\n    let countZeros = 0;\n    // Count ending zeros after decimal and remove\n    for (let i = str.length - 1; i >= 0; i--) {\n      if (str.charAt(i) === \"0\") {\n        countZeros++;\n      } else {\n        break;\n      }\n    }\n    if (countZeros > 0) {\n      // Remove trailing zeros from final result\n      const removeZeros = str.substring(0, str.length - countZeros);\n      // If decimal is all that is left, remove that also\n      if (removeZeros.indexOf(\".\") === removeZeros.length - 1) {\n        return removeZeros.substring(0, removeZeros.indexOf(\".\"));\n      }\n      return removeZeros;\n    } else {\n      // No trailing zeros found\n      return str;\n    }\n  } else {\n    // No decimal in number\n    return str;\n  }\n}"]},"metadata":{},"sourceType":"module"}